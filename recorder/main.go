package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"time"
)

// recordScreen –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å –ø–æ–º–æ—â—å—é ffmpeg
func recordScreen(outputPath string, duration time.Duration) error {
	display := ":0"

	// –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞
	cmd := exec.Command("ffmpeg",
		"-f", "x11grab", // –§–æ—Ä–º–∞—Ç –∑–∞—Ö–≤–∞—Ç–∞ X11
		"-video_size", "1920x1080", // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
		"-framerate", "24", // –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
		"-i", display, // –î–∏—Å–ø–ª–µ–π –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
		"-t", fmt.Sprintf("%.0f", duration.Seconds()), // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		"-pix_fmt", "yuv420p", // –§–æ—Ä–º–∞—Ç –ø–∏–∫—Å–µ–ª–µ–π
		"-c:v", "libx264", // –ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ
		"-preset", "fast", // –ü—Ä–µ—Å–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
		"-crf", "25", // –ö–∞—á–µ—Å—Ç–≤–æ (0-51, –º–µ–Ω—å—à–µ - –ª—É—á—à–µ)
		outputPath, // –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
	)

	// –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	fmt.Printf("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –Ω–∞ %v...\n", duration)
	fmt.Printf("–ö–æ–º–∞–Ω–¥–∞: %s\n", cmd.String())

	return cmd.Run()
}

// createOutputDir —Å–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏
func createOutputDir() (string, error) {
	dirName := fmt.Sprintf("recordings_%s", time.Now().Format("20060102_150405"))
	err := os.MkdirAll(dirName, 0755)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
	}
	return dirName, nil
}

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç...")
	fmt.Println("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏
	outputDir, err := createOutputDir()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞: %v", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
	timestamp := time.Now().Format("150405")
	outputFile := filepath.Join(outputDir, fmt.Sprintf("recording_%s.mp4", timestamp))

	duration := 1 * time.Minute

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
	err = recordScreen(outputFile, duration)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: %v", err)
	}

	fmt.Printf("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s\n", outputFile)
	fmt.Printf("üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	if info, err := os.Stat(outputFile); err == nil {
		sizeMB := float64(info.Size()) / (1024 * 1024)
		fmt.Printf("%.2f MB\n", sizeMB)
	}
}
